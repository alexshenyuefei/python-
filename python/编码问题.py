"""
字符串是一种数据类型，但是，字符串比较特殊的,还有一个编码问题
因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。
由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。

Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
ASCII编码是1个字节，而Unicode编码通常是2个字节。

如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。

所以，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：
而且utf-8是向下兼容ascii的
"""

"""
在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。

用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，
编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：
浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：
所以你看到很多网页的源码上会有类似<meta charset="UTF-8" />的信息，表示该网页正是用的UTF-8编码。
"""

"""
Python的字符串
在最新的Python 3版本中，字符串是以Unicode编码的
"""

# 1:显示字符串的unicode格式
a = '王'
print(a,ord(a)) # 查看单个字的unicode整数值,十进制
b = '阿瓦隆'

print(b,b.encode('unicode_escape')) #查看字符串的unicode值,16进制
print(b,b.encode('utf-8')) #查看字符串的utf-8编码模式


# 使用python爬虫时候,爬到的是Json 格式,里面中文都是'\u5927\u536b\u00b7\u82ac\u5947'unicode格式
print('\u5927\u536b\u00b7\u82ac\u5947') # 直接打印即可'
print(a)
# 在python2中由于字符默认是Bytes类型,要先decode('utf-8')变成unicode即可