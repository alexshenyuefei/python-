"""
函数定义时，每个名称是解析到当前作用域还是外部作用域就已经决定
如果这一名称在函数内的任意语句中被绑定（包括普通绑定、特殊绑定以及参数绑定），则该名称解析的作用域是当前作用域
否则，该名称将被解析到外部作用域
有函数局部变量的话,就会生成一个局部名称空间
即使绑定语句从未执行，也会在解析时使用当前作用域(局部名称空间找变量)
"""

a = 2
def func():
    print(a) # 报错
    if False:
        a = 1 # 局部变量在赋值前被引用
func()
"""
如果调用方未绑定该参数，则使用默认值
绑定默认值到可变类型时需要格外注意
服从绑定的一般规则：所有调用中默认参数绑定的是相同对象
"""
def func1(v, a = []):
    a.append(v)
    return a
a = func1(1)      # [1]
b = func1(1)      # [1,1]


# 名称解析到具体的值是在运行时进行的
def func():
    return a
a = 1
func() # 1
a = 2
func() # 2
del a
func() # 报错



