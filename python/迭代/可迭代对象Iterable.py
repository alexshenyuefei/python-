"""
我们把可以通过for...in...这类语句迭代读取一条数据供我们使用的对象称之为可迭代对象（Iterable）。
可迭代对象通过__iter__方法向我们提供一个迭代器，
一个具备了__iter__方法的对象，就是一个可迭代对象。
"""

"""
一个实现了__iter__方法和__next__方法的对象，就是迭代器。
Iterator(迭代器)的__iter__只需要返回自己就行了。
那么为什么不只保留Iterator的接口而还需要设计Iterable呢？
许多对象比如list、dict，是可以重复遍历的，甚至可以同时并发地进行遍历，
通过__iter__每次返回一个独立的迭代器，就可以保证不同的迭代过程不会互相影响。
而生成器表达式之类的结果往往是一次性的，不可以重复遍历，所以直接返回一同一Iterator就好。
让Iterator也实现Iterable的兼容就可以很灵活地选择返回哪一种。
"""
"""
for为了兼容性其实有两种机制，如果对象有__iter__会使用迭代器，
但是如果对象没有__iter__，但是实现了__getitem__，会改用下标迭代的方式。
当for发现没有__iter__但是有__getitem__的时候，会从0开始依次读取相应的下标，直到发生IndexError为止，这是一种旧的迭代协议。
迭代str就是这样的
"""