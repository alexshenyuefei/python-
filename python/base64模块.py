import base64

"""
理解Base64或其他类似编码的关键有两点：

计算机最终存储和执行的是01二进制序列，这个二进制序列的含义则由解码程序/解释程序决定
很多场景下的数据传输要求数据只能由简单通用的字符组成，比如HTTP协议要求请求的首行和请求头都必须是ASCII编码
Base64编码之所以称为Base64，是因为其使用64个字符来对任意数据进行编码，同理有Base32、Base16编码。标准Base64编码使用的64个字符为：
http://blog.xiayf.cn/2016/01/24/base64-encoding/

这64个字符是各种字符编码（比如ASCII编码）所使用字符的子集，基本，并且可打印。唯一有点特殊的是最后两个字符，因对最后两个字符的选择不同，Base64编码又有很多变种，比如Base64 URL编码。
Base64编码本质上是一种将二进制数据转成文本数据的方案。对于非二进制数据，是先将其转换成二进制形式，然后每连续6比特（2的6次方=64）计算其十进制值，根据该值在上面的索引表中找到对应的字符，最终得到一个文本字符串。

但这里需要注意一个点：Base64编码是每3个原始字符编码成4个字符，如果原始字符串长度不能被3整除，那怎么办？使用0值来补充原始字符串。


"""

"""
ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，比如说从A地传到B地，
往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。
所以就先把数据先做一个Base64编码，统统变成可见字符，这样出错的可能性就大降低了。
对证书来说，特别是根证书，一般都是作Base64编码的，因为它要在网上被许多人下载。电子邮件的附件一般也作Base64编码的，
因为一个附件数据往往是有不可见字符的。


"""
"""
base64模块是用来作base64编码解码的。这种编码方式在电子邮件中是很常见的。
把3字节的二进制数据编码为4字节的文本数据，长度增加33%.
好处是编码后的文本数据可以在邮件正文、网页等直接显示。

如果要编码的二进制数据不是3的倍数，
最后会剩下1个或2个字节怎么办？
Base64用\x00字节在末尾补足后，
再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。


"""
# 需要bytes类型
a = base64.b64encode(b'binary\x00string')
print(a,type(a))
print(base64.b64decode(a),type(a))
"""
由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，
所以又有一种"url safe"的base64编码，其实就是把字符+和/分别变成-和_
"""
b = base64.b64encode(b'i\xb7\x1d\xfb\xef\xff')
c = base64.urlsafe_b64encode(b'i\xb7\x1d\xfb\xef\xff')
print(b)
print(c)
print(base64.urlsafe_b64decode(c))