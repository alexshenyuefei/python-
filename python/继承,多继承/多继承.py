"""
多重继承
Python 允许子类继承多个基类
方法解释顺序（MRO）
遵循以下三条原则：
子类永远在父类前面(优先调用子类)
如果有多个父类，会根据它们在列表中的顺序被检查
如果对下一个类存在两个合法的选择，选择第一个父类
"""
"""
属性查找示例,现在的查询方法是采用广度优先
简单属性查找示例
关系详情查看子类父类孙类关系图
它首先查找同胞兄弟，采用一种广度优先的方式。
当查找foo()，它检查GC，然后是C1 和C2，然后在P1 中找到。如果P1 中没有，查找将会到达P2。
查找bar(),它搜索GC 和C1，紧接着在C2 中找到了。这样，就不会再继续搜索到祖父P1 和P2。
新式类也有一个__mro__属性，告诉你查找顺序是怎样的
"""


class P1(object): #(object): # parent class 1 父类1
    def foo(self):
        print("调用的是P1类的foo方法")


class P2(object):
    def foo(self):
        print("调用的是P2类的foo方法")

    def bar(self):
        print("调用的是P2类的bar方法")


class C1(P1,P2):#子类1，从P1，P2 派生
    pass


class C2(P1,P2):# 子类2,从P2,P1派生
    def bar(self):
        print("调用是c2的bar方法")


class GC(C1,C2): # 孙类从C1,C2派生
    pass

print(GC.__mro__)

gc = GC()
gc.foo() # GC ==> C1 ==> C2 ==> P1
gc.bar() # GC ==> C1 ==> C2
"""
首先查找同胞兄弟,一个父亲代表同胞兄弟,没有同胞兄弟就找父亲
比如GC继承自C1,C2,先找C1,C1没有,就找C1的兄弟(继承自相同父类,顺序也要一样),C
C1没有兄弟,就找C1的父类.C1的父类没有,再找C2.
C2如果没有就找C2的父类
"""